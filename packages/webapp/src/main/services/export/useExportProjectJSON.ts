import { BesserProject } from '../../types/project';

// Simple download helper
function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

// Export project as a single JSON file
export async function exportProjectAsJson(project: BesserProject) {
  const exportData = {
    project,
    exportedAt: new Date().toISOString(),
    version: '2.0.0' // Updated version for V2 format
  };

  const blob = new Blob([JSON.stringify(exportData, null, 2)], { 
    type: 'application/json' 
  });
  
  const filename = `${project.name.replace(/[^a-z0-9]/gi, '_') || 'project'}.json`;
  downloadBlob(blob, filename);
}

// ZIP export with V2 format
export async function useExportProjectJSON(project: BesserProject) {
  try {
    const JSZip = (await import('jszip')).default;

    const zip = new JSZip();

    // Add project metadata
    zip.file('project.json', JSON.stringify(project, null, 2));

    // Add each diagram as a separate JSON file in the diagrams folder
    const diagramsFolder = zip.folder('diagrams');
    if (diagramsFolder) {
      Object.entries(project.diagrams).forEach(([type, diagram]) => {
        diagramsFolder.file(`${type}.json`, JSON.stringify(diagram, null, 2));
      });
    }

    // Add README with project information
    const diagramCount = Object.keys(project.diagrams).length;
    const readme = `# ${project.name}

${project.description || 'No description provided.'}

## Project Information
- **Owner:** ${project.owner || 'Unknown'}
- **Created:** ${new Date(project.createdAt).toLocaleDateString()}
- **Diagrams:** ${diagramCount} (${Object.keys(project.diagrams).join(', ')})
- **Current Diagram:** ${project.currentDiagramType}

## Export Information
- **Exported:** ${new Date().toLocaleDateString()}
- **Version:** 2.0.0

## Contents
- \`project.json\` - Project metadata and settings
- \`diagrams/\` - Individual diagram files in JSON format
- \`README.md\` - This file

## How to Import
1. Open BESSER Web Modeling Editor
2. Go to File > Import Project
3. Select this ZIP file
4. Your project and all diagrams will be restored

Generated by BESSER Web Modeling Editor V2
`;

    zip.file('README.md', readme);

    // Generate and download the ZIP file
    const content = await zip.generateAsync({ type: 'blob' });
    const filename = `${project.name.replace(/[^a-z0-9]/gi, '_').toLowerCase() || 'project'}_export.zip`;
    
    downloadBlob(content, filename);
    
  } catch (error) {
    console.error('ZIP export failed, falling back to JSON:', error);
    // Fallback to JSON export if ZIP fails
    await exportProjectAsJson(project);
  }
}

// Main export function - directly exports the current project as JSON
export async function exportProjectById(project: BesserProject) {
  await exportProjectAsJson(project);
}
